{"version":3,"sources":["components/navbar.js","components/cardWrapper.js","components/card.js","App.js","index.js"],"names":["Navbar","props","className","answerText","score","topScore","CardWrapper","children","Card","src","img","alt","id","style","height","width","onClick","getClicked","App","state","list","clickedIds","clicked","includes","setState","newList","shuffle","i","length","j","Math","floor","random","temp","this","map","el","key","name","Component","ReactDOM","render","document","getElementById"],"mappings":"+OAceA,MAZf,SAAgBC,GACZ,OACI,6BACI,yBAAKC,UAAU,0CACX,4CACA,4BAAKD,EAAME,YACX,sCAAYF,EAAMG,MAAlB,gBAAsCH,EAAMI,aCI7CC,MAVf,SAAqBL,GACjB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACVD,EAAMM,Y,aCWRC,MAdf,SAAcP,GACV,OACI,6BACI,yBAAKC,UAAU,gCACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKO,IAAKR,EAAMS,IAAKR,UAAU,wBAAwBS,IAAKV,EAAMW,GAAIC,MAAO,CAACC,OAAO,IAAKC,MAAO,KAAMC,QAAS,kBAAKf,EAAMgB,WAAWhB,EAAMW,YCiErJM,E,2MAnEbC,MAAQ,CACNhB,WAAY,gBACZC,MAAO,EACPC,SAAU,EACVe,OACAC,WAAY,I,EAGdJ,WAAa,SAACK,GAER,EAAKH,MAAME,WAAWE,SAASD,IACjC,EAAKE,SAAS,CAAErB,WAAY,eACxB,EAAKgB,MAAMd,SAAW,EAAKc,MAAMf,OACnC,EAAKoB,SAAS,CAAEnB,SAAU,EAAKc,MAAMf,QAEvC,EAAKoB,SAAS,CAAEpB,MAAO,IACvB,EAAKoB,SAAS,CAAEH,WAAY,OAE5B,EAAKG,SAAS,CAAEH,WAAW,GAAD,mBAAM,EAAKF,MAAME,YAAjB,CAA6BC,MACvD,EAAKE,SAAS,CAAErB,WAAY,0BAC5B,EAAKqB,SAAS,CAAEpB,MAAO,EAAKe,MAAMf,MAAQ,KAE5C,IAAIqB,EAAU,EAAKN,MAAMC,KACzB,EAAKM,QAAQD,I,EAIfC,QAAU,SAACD,GAET,IADA,IAAIE,EAAIF,EAAQG,OAAS,EAClBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOR,EAAQE,GACrBF,EAAQE,GAAKF,EAAQI,GACrBJ,EAAQI,GAAKI,EAEf,EAAKT,SAAS,CAAEJ,KAAMK,K,wEAGd,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEtB,WAAY+B,KAAKf,MAAMhB,WACvBC,MAAO8B,KAAKf,MAAMf,MAClBC,SAAU6B,KAAKf,MAAMd,WAEvB,yBAAKH,UAAU,yBACb,wBAAIA,UAAU,aAAd,gBACA,uBAAGA,UAAU,QAAb,6EAEF,kBAAC,EAAD,KACGgC,KAAKf,MAAMC,KAAKe,KAAI,SAACC,GACpB,OAAO,kBAAC,EAAD,CACLxB,GAAIwB,EAAGxB,GACPyB,IAAKD,EAAGxB,GACRF,IAAK0B,EAAGE,KACRrB,WAAY,EAAKA,sB,GAzDbsB,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.00967455.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n    return (\n        <div>\n            <nav className=\"navbar fixed-top navbar-light bg-light\">\n                <h4>Clicky Game!</h4>\n                <h4>{props.answerText}</h4>\n                <h4>Score: {props.score} | Top Score {props.topScore}</h4>\n            </nav>\n        </div>\n    );\n};\n\nexport default Navbar","import React from \"react\";\n\nfunction CardWrapper(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default CardWrapper","import React from \"react\";\nimport \"./card.css\";\n\nfunction Card(props) {\n    return (\n        <div>\n            <div className=\"row row-cols-1 row-cols-md-3\">\n                <div className=\"col m-1\">\n                    <div className=\"card\">\n                        <img src={props.img} className=\"card-img-top picHover\" alt={props.id} style={{height:170, width: 170}} onClick={()=> props.getClicked(props.id)}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport CardWrapper from \"./components/cardWrapper\";\nimport list from \"./list.json\";\nimport Card from \"./components/card\";\n\nclass App extends Component {\n  state = {\n    answerText: \"Make a Guess!\",\n    score: 0,\n    topScore: 0,\n    list,\n    clickedIds: []\n  };\n\n  getClicked = (clicked) => {\n\n    if (this.state.clickedIds.includes(clicked)) {\n      this.setState({ answerText: \"You Loose!\" });\n      if (this.state.topScore < this.state.score) {\n        this.setState({ topScore: this.state.score })\n      }\n      this.setState({ score: 0 })\n      this.setState({ clickedIds: [] });\n    } else {\n      this.setState({ clickedIds: [...this.state.clickedIds, clicked] })\n      this.setState({ answerText: \"You Guess correctly!!\" });\n      this.setState({ score: this.state.score + 1 })\n    }\n    var newList = this.state.list;\n    this.shuffle(newList)\n\n  };\n\n  shuffle = (newList) =>{\n    let i = newList.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = newList[i];\n      newList[i] = newList[j];\n      newList[j] = temp;\n    }\n    this.setState({ list: newList })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          answerText={this.state.answerText}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"jumbotron text-center\">\n          <h1 className=\"display-4\">Clicky Game!</h1>\n          <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n        <CardWrapper>\n          {this.state.list.map((el) => {\n            return <Card\n              id={el.id}\n              key={el.id}\n              img={el.name}\n              getClicked={this.getClicked}\n            />\n          })}\n        </CardWrapper>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}